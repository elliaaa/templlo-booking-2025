server:
  port: 19050

spring:
  application:
    name: promotion-service

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      cache:
        cache-names: couponStatus
        time-to-live: 300000 # 5분
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: coupon-consumer-group
      auto-offset-reset: earliest
      enable-auto-commit: false # 수동 ACK를 사용하기 위해 false로 설정
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    topic:
      ticket-queue: ticket-application-queue

eureka:
  client:
    service-url:
      defaultZone: http://localhost:19090/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true

cloud:
  gateway:
    discovery:
      locator:
        enabled: true

logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.templlo.service.coupon.feign: DEBUG



jwt:
  secret: ${JWT_SECRET_KEY}

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: FULL


user:
  service:
    url: http://localhost:19010

management:
  endpoints:
    web:
      exposure:
        include: prometheus
  prometheus:
    metrics:
      export:
        enabled: true